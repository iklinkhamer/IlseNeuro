function visualizePriorCspkTuning(mice)
    arguments 
        mice (1,:) string = [paperFiguresMice().name];
    end
    
    import JkUtils.visualization.excludeFromLegend;
    import JkUtils.flatmap;
    
    p = getParams();
    
    rangeMin = p.cspkRanges.prior.min * 1000;
    rangeMax = p.cspkRanges.prior.max * 1000;
    
    peakDelayData = arrayfun ...
        ( @(mname) computeCspkTuningDelays ...
            ( mname ...
            , modulating = true ...
            , event = "prior" ...
            , type = "uniform" ...
            ) ...
        , mice ...
        );
    
    [delayAx, delayFig] = JkUtils.initPlots([1 1]);
    title(delayAx, "Prior CSpk modes")
    ylabel(delayAx, "CSpk histogram mode [ms]")
    
    [delays, delayLabels] = unpack(peakDelayData, "delays");
%     anova1(delays, delayLabels);
    
    mkBoxCharts(delayAx, peakDelayData, "delays")
    touchupGraph(delayAx, peakDelayData, "delays", rangeMin, rangeMax)
%     ylim(delayAx, [rangeMin rangeMax])
    
    
    histWidthData = arrayfun ...
        ( @(mname) computeCspkTuningWidths ...
            ( mname ...
            , modulating = true ...
            , event = "prior" ...
            , type = "uniform" ...
            ) ...
        , mice ...
        );
    
    [widthAx, widthFig] = JkUtils.initPlots([1 1]);
    title(widthAx, "Prior CSpk widths")
    ylabel(widthAx, "CSpk histogram SD [ms]")
    
    [widths, widthLabels] = unpack(histWidthData(:), "sds");
%     anova1(widths, widthLabels);

    mkBoxCharts(widthAx, histWidthData, "sds")
    touchupGraph(widthAx, histWidthData, "sds", 0, rangeMax-rangeMin)
%     ylim(widthAx, [0 (rangeMax-rangeMin + 10)])

    
    %% Saving
    
    exportFolder = fullfile ...
            ( Env.getBayesLabUserRoot() ...
            , "TraceExperiments" ...
            , "Cerebellar Priors and Complex Spikes" ...
            , "DefaultExport" ...
            , JkUtils.todayStr() ...
            );
    mkdir(exportFolder)
    
    printFigure ...
        ( delayFig ...
        , "priorCSpkDelays_across_mice" ...
        , folder = exportFolder ...
        )
     printFigure ...
        ( widthFig ...
        , "priorCSpkWidths_across_mice" ...
        , folder = exportFolder ...
        )
    
    %% Utils
    
    function [values, labels] = unpack(data, dataField)
        
        labels = flatmap ...
            ( @(dat) repmat(dat.mname, size(dat.(dataField))) ...
            , data ...
            );
        values = [data.(dataField)];
        
    end

    function mkBoxCharts(ax, miceData, dataField)
        
        boxChartColor = [.7 .7 .7];
        
        xLimits = [0.5 numel(miceData)+0.5];
%         yMax = max([miceData.(dataField)]);
        
        mouseMeans = arrayfun ...
            ( @(dat) mean(dat.(dataField)) ...
            , miceData ...
            );
        grandMean = mean(mouseMeans);

        excludeFromLegend ...
            ( line ...
                ( ax ...
                , [0 numel(miceData)+1] ...
                , repmat(grandMean, size(ax.XLim)) ...
                , linestyle = '--' ...
                , color = [.7 .7 .7] ...
                ) ...
            )

        mkBoxChart = @(x, data) ...
            boxchart ...
                ( ax ...
                , repmat(x, size(data.(dataField))) ...
                , data.(dataField) ...
                , displayname = data.mname ...
                , markerstyle = 'x' ...
                , jitteroutliers = false ...
                , notch = false ...
                , boxfacealpha  = .2 ...
                , boxfacecolor = boxChartColor ...
                , whiskerlinecolor = boxChartColor - .3 ...
                , markercolor = boxChartColor - .3 ...
                );

        arrayfun ...
            ( mkBoxChart ...
            , 1:numel(miceData) ...
            , miceData ...
            )

%         legend(ax)
        xlim(ax, xLimits)
        ax.XTick = 1:numel(miceData);
        ax.XTickLabel = [miceData.mname];

    end
    
    function touchupGraph(ax, miceData, dataField, rangeMin, rangeMax)
        
        ylim(ax, [rangeMin rangeMax+5])
        nTotal = numel([miceData.(dataField)]);

        subtitle(ax, sprintf("N=%d", nTotal))
        
        showN = @(x, data) ...
            text ...
                ( ax ...
                , x, max(data.(dataField)) + 3 ...
                , sprintf("N=%d", numel(data.(dataField))) ...
                , HorizontalAlignment = 'center' ...
                , color = [.3 .3 .3] ...
                );
        
        arrayfun ...
            ( showN ...
            , 1:numel(miceData) ...
            , miceData ...
            );
        
    end
end