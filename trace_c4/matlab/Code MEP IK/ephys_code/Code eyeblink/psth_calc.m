% Calculate cell peristimulus time histogram (PSTH) and trigger aligned spikes (TAS), revised version 2.0.
% Function input:  cell_spk, defined as an array of struct (2 fields, defined below), generated by 'import_jrc_csv.m'
%                              nr: the cell number, 0 means noise channel
%                              t:  the spike timings
%                  stm_lc,   defined as an array of struct (2 fields, defined below), generated by 'locs_vfy.m'
%                              nr: the trial number
%                              t:  the trigger timing
%                  bin_size, time duration of bins defined to calculate PSTH (ms)
%                  step,     time duration between two neighbouring bins (ms)
%                  t_pre,    pre-stimultion time to be analyzed (ms)
%                  t_post,   post-stimultion time to be analyzed (ms)
% Function output: psth,     defined as an array of struct (2 fields, defined below)
%                              cell: the cell number of PSTH
%                              bar:  the PSTH bar information, defined as an array of struct (3 fields, defined below)
%                                      bin: the number of PSTH bar
%                                      h:   the hight of PSTH bar
%                                      t:   the represented time of bar
%                  tas,      defined as an array of struct (2 fields, defined below)
%                              cell: the cell number of TAS
%                              tss:  the trigger separated spike (TSS) information, defined as an array of struct (2 fields, defined below)
%                                      trial: the number of related trial
%                                      t:     the spike timestamps within difined range of 't_pre' to 't_post', regards trigger timing

function [psth,tas] = psth_calc(cell_spk,stm_lc,bin_size,step,t_pre,t_post)
    if ~isempty([stm_lc.nr])
    bin_size = bin_size / 1000;
    step = step / 1000;
    t_pre = t_pre / 1000;
    t_post = t_post / 1000;

  % Creating trigger aligned spikes (TAS) as a struct   
    tas(size(cell_spk,2) - 1) = struct('cell',[],'tss',[]);
    for i = 2:size(cell_spk,2)    % Escaping Cell_No.0 (background), index starts from 2
      % Extracting data for each cell as trigger separated spikes (TSS)
        tss(size(stm_lc,2)) = struct('trial',[],'t',[]);
        for j = 1:size(stm_lc,2)
            idx = ([cell_spk(i).t] > stm_lc(j).t - t_pre) & ([cell_spk(i).t] <= stm_lc(j).t + t_post);
            fire = cell_spk(i).t(idx);
            fire = fire - stm_lc(j).t;
          % Arranging data
            tss(j).trial = stm_lc(j).nr;
            tss(j).t = fire;
        end
      % Arranging data
        tas(i-1).cell = i - 1;
        tas(i-1).tss = tss;
    end

  % Processing peristimulus time histogram (PSTH)
    bin_init = - floor((t_pre - bin_size) / step);
    n_bin = floor((t_pre + t_post - bin_size) / step) + 1;
  % Define terminals of bin
    if mod((t_pre + t_post - bin_size),step) ~= 0
        t_init = step * bin_init - bin_size;
        warning('off','backtrace');
        warning('Defined time range indivisible by defined bin size and bin step');
        warning('on','backtrace');
    else
        t_init = - t_pre;
    end
  % Initiallizing structs
    psth(size(tas,2)) = struct('cell',[],'bar',[]);
    bar(n_bin) = struct('bin',[],'h',[],'t',[]);
    n_spk(size(tas(1).tss,2)) = 0;
  % 1st loop for each cell, cell number indicator as 'i'
    for i = 1:size(tas,2)
      % 2nd loop for each bin, bin number indicator as 'j'
        for j = 1:n_bin
          % 3rd loop for each tirgger, trigger number indicator as 'k'
            for k = 1:size(tas(1).tss,2)
                idx = [tas(i).tss(k).t] > round(((j - 1) * step + t_init),6) & [tas(i).tss(k).t] <= round(((j - 1) * step + t_init + bin_size),6);
                n_spk(k) = sum(idx);
            end
        % Arranging data for histogram BIN-X (bar.bin) and BIN-Y (bar.h)
          bar(j).bin = j + bin_init - 1;
          bar(j).h = mean(n_spk) / bin_size;
          bar(j).t = round(((j - 1) * step + t_init + bin_size),6);
        end
      % Arranging data for each cell PSTH
        psth(i).cell = i;
        psth(i).bar = bar;
    end
    else
    psth.cell = [];
    psth.bar = [];
    tas.cell = [];
    tas.tss = [];
    end
end