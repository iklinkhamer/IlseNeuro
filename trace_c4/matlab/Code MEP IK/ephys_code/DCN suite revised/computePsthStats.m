%% IK 26-4-24
function histogramStats = computePsthStats(raster, roi, fullRange)
% try
    P = IkUtils.getParams();
    binWidth = P.BinW;

%     nTrials = max(raster(2, :)) - P.raster_spike_height;

    uniqueTrials = unique(raster(2, 1:3:end));  % Unique trial values
    nTrials = numel(uniqueTrials);    

    fullMask = ...
        raster(1,:) >= fullRange.min ... 
        & raster(1,:) <= fullRange.max ...
        ;
    spikeTimesFull_ = raster(1,fullMask);
    spikeTimesFull = spikeTimesFull_(1:2:end);
    binEdgesFull = fullRange.min:binWidth:fullRange.max;

    amplitudesFiltered = histcounts(spikeTimesFull, binEdgesFull);

%     baseline_range_mask = binEdgesFull <= P.sspkRanges.cs.min | binEdgesFull >= P.sspkRanges.us.max;
    baseline_range_mask = binEdgesFull <= P.sspkRanges.cs.min;
    baseline = mean(amplitudesFiltered(baseline_range_mask(1:end-1)));
    baserate = baseline/nTrials/binWidth;
    basefreqSD = std(amplitudesFiltered(baseline_range_mask(1:end-1))/nTrials/binWidth);

    amplitudesDuringBaseline = amplitudesFiltered(baseline_range_mask(1:end-1));
    meanAboveBaseline = mean(amplitudesDuringBaseline(amplitudesDuringBaseline/nTrials/binWidth > baserate)/nTrials/binWidth - baserate);
    meanBelowBaseline = mean(baserate - amplitudesDuringBaseline(amplitudesDuringBaseline/nTrials/binWidth < baserate)/nTrials/binWidth);


    mean_rate_full = mean(amplitudesFiltered);
    rate_full = mean_rate_full/nTrials/binWidth;

    simpleRegionMask = ...
        raster(1,:) >= roi.min ...
        & raster(1,:) <= roi.max ...
        ;

    simple_data_unsorted = raster(1,simpleRegionMask);
    spikeTimes = simple_data_unsorted(:,1:2:end);

    binEdges = roi.min:binWidth:roi.max;
    amplitudes = histcounts(spikeTimes , binEdges);

    rate_test = mean(amplitudes/nTrials/binWidth);

    if roi.max - roi.min > P.sspkRanges.us.max - P.sspkRanges.us.min
        if rate_test > baserate
            [~, peak_time] = max(amplitudes);
        else
            [~, peak_time] = min(amplitudes);
        end

        maxBinCS = (P.sspkRanges.cs.max - P.sspkRanges.cs.min)/binWidth;
        maxBinUS = (P.sspkRanges.us.max - P.sspkRanges.us.min)/binWidth;
        if peak_time - maxBinUS/2 < 1
            new_range = int64(1:maxBinUS);
        elseif peak_time + maxBinUS/2 > maxBinCS
            new_range = int64(maxBinCS - maxBinUS : maxBinCS);
        else
            new_range = int64(peak_time - maxBinUS/2 : peak_time + maxBinUS/2 - 1);
        end
        amplitudes = amplitudes(new_range);
    end

    rate = mean(amplitudes/nTrials/binWidth);

    modulation = rate - baserate;

    maxAmp = max(amplitudes);
    maxAmpIdxMedian = floor(median(find(amplitudes == maxAmp)));
    if exist('new_range', 'var')
        maxAmpIdxMedian = new_range(maxAmpIdxMedian);
    end
    maxAmpTime = binEdges(maxAmpIdxMedian);
    %     maxAmpTime_relative = (maxAmpIdxMedian - 0.5) * binWidth;

    minAmp = min(amplitudes);
    minAmpIdxMedian = floor(median(find(amplitudes == minAmp)));
    if exist('new_range', 'var')
        minAmpIdxMedian = new_range(minAmpIdxMedian);
    end
    minAmpTime = binEdges(minAmpIdxMedian);
    %     minAmpTime_relative = (minAmpIdxMedian - 0.5) * binWidth;

    ISIs_full = diff(spikeTimesFull);   ISIs_full = ISIs_full(ISIs_full > 0);
    ISIs_roi = diff(spikeTimes);    ISIs_roi = ISIs_roi(ISIs_roi > 0);
    meanISIroi = mean(ISIs_roi);

    window_times = roi.min:binWidth:roi.max;
    for i = 1 : length(window_times) - 1
        t = window_times(i);
        spikes_in_window_mask = spikeTimes >= t & spikeTimes < t + binWidth;
        spikes_in_window = spikeTimes(spikes_in_window_mask);
        local_covariance(i) = cov(spikes_in_window);
    end
    meanLcov = mean(local_covariance);

    if rate > baserate
        correctedRate = max(rate - meanAboveBaseline, baserate);
    else
        correctedRate = min(rate + meanBelowBaseline, baserate);
    end

    histogramStats = struct ...
        ( maxAmp = maxAmp ...
        , maxAmpTime = maxAmpTime...%roi.min + maxAmpTime_relative ...
        , sd = std(spikeTimes) ...
        , baseline = baseline ...
        , basefreqSD = basefreqSD ...
        , modulation = modulation ...
        , spikeTimes = spikeTimes ...
        , searchRange = roi ...
        , binWidth = binWidth ...
        , minAmp = minAmp ...
        , minAmpTime = minAmpTime...%roi.min + minAmpTime_relative ...
        , baserate = baserate...
        , correctedRate = correctedRate...
        , rate = rate ...
        , rateFull = rate_full...
        , cov = cov(spikeTimes) ...
        , covFull = cov(spikeTimesFull)...
        , meanLcov = meanLcov ...
        , ISIs_full = ISIs_full ...
        , ISIs_cs = ISIs_roi ...
        , meanISIroi = meanISIroi ...
        , meanAboveBaseline = meanAboveBaseline...
        , meanBelowBaseline = meanBelowBaseline...
        );
% catch
%     histogramStats = struct ...
%         ( maxAmp = [] ...
%         , maxAmpTime = [] ...
%         , sd = [] ...
%         , baseline = [] ...
%         , basefreqSD = [] ...
%         , modulation = [] ...
%         , spikeTimes = [] ...
%         , searchRange = [] ...
%         , binWidth = [] ...
%         , minAmp = [] ...
%         , minAmpTime = [] ...
%         , baserate = []...
%         , correctedRate = []...
%         , rate = [] ...
%         , rateFull = [] ...
%         , cov = [] ...
%         , covFull = [] ...
%         , meanLcov = [] ...
%         , ISIs_full = [] ...
%         , ISIs_cs = [] ...
%         , meanISIroi = [] ...
%         , meanAboveBaseline = []...
%         , meanBelowBaseline = []...        
%         );
% end

end