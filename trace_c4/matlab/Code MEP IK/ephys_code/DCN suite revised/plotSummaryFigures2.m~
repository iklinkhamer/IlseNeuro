function [axs, figs, types] = plotSummaryFigures2(mname, type, kwargs)
    arguments
        mname (1,1) string
        type (1,1) string = getMouseType(mname);
        kwargs.modulating (1,1) logical
        kwargs.event (1,1) string
    end
    
    import IkUtils.ifelse;
    import IkUtils.visualization.scatterWithBarCharts;
    
    p = getParams();
        
    switch lower(type)
        case "uniform"
            sessionIdcs = splitSessionsByType(mname).uniform;
            types = "uniform";
        case "delta"
            sessionIdcs = splitSessionsByType(mname).delta;
            types = "delta";
        case "deun"
            types = ["delta", "uniform"];
            [axs(1,:,1), figs(1)] = plotSummaryFigures2 ...
                ( mname ...
                , types(1) ...
                , event = kwargs.event ...
                , modulating = kwargs.modulating ...
                );
            [axs(1,:,2), figs(2)] = plotSummaryFigures2 ...
                ( mname ...
                , types(2) ...
                , event = kwargs.event ...
                , modulating = kwargs.modulating ...
                );     
            return
        otherwise
            error("Unknown session type: %s", type)
    end
    
    allStats = histStatsMouseWrapper(mname);    
    stats = allStats(sessionIdcs);

    if kwargs.modulating
        data = [stats.modulating];
    else
        data = [stats.nonModulating];
    end
    
    eventData = IkUtils.flatten({data.(kwargs.event)}, uniformOutput = true);
    
    if isempty(eventData)
        peakTimes_ms = [];
        std_ms = [];
    else
        [peakTimes_ms, filterMask] = rejectSDOutliers([eventData.maxAmpTime] * 1000);
        std_ms = [eventData(filterMask).sd] * 1000;
    end
    
    ymin = p.cspkRanges.(kwargs.event).min * 1000; %   0;
    ymax = p.cspkRanges.(kwargs.event).max * 1000; % 200;
    
    [axs, figs] = scatterWithBarCharts ...
        ( std_ms ...
        , peakTimes_ms ...
        , binwidth = 5 ...
        , xlim = [0 0.1]*1000 ...
        , ylim = [ymin ymax] ...
        , xlabel = "peak widths [ms]" ...
        , ylabel = "peak times [ms]" ...
        , title = sprintf ...
            ( "%s %s, %s %s\nN: %d, SD_y: %.2f, \\mu_x: %.2f" ...
            , mname ...
            , type ...
            , kwargs.event ...
            , ifelse(kwargs.modulating, "modulating", "non modulating") ...
            , numel(peakTimes_ms) ...
            , std(peakTimes_ms) ...
            , computeCspkTuningWidths ...
                ( mname ...
                , modulating = kwargs.modulating ...
                , type = type ...
                , event = kwargs.event ...
                ).sds_mean ...
            ) ...
        );
    
end