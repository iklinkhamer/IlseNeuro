%% I.K. 1-6-24
function rawResult = loadSimpleCurationResultRaw(mname, kwargs)
    arguments
        mname (1,1) string
        kwargs.onlyLatest (1,1) {islogical} = true;
    end     
   
    args = ...
        { mname ...
        , 'onlyLatest', kwargs.onlyLatest ...
        };

    rawResult = struct ...
        ( simple = loadSimpleMasks(args{:}) ...
        , exemplary = loadExemplarySimpleChannelMasks(args{:}) ...
        , modulation = loadSimpleChannelModulationMasks(args{:}) ...
        );

    [~, date] = loadSimpleMasks(args{:}); % IK added 13-05-24. if the date is empty it means there were no prev curation results.
    if isempty(date)
        rawResult = [];
    end

%     rawResult = 
%     simpleMasks = loadSimpleMasks(args{:});
%     exemplaryMasks = loadExemplarySimpleChannelMasks(args{:});
%     modulationMasks = loadSimpleChannelModulationMasks(args{:});
    
%     if numel(simpleMasks) ~= numel(exemplaryMasks) ...
%         || numel(simpleMasks) ~= numel(modulationMasks)
%         warning ...
%             ( "unequal number of session in previous curation masks:\n" ...
%             + "\tsimple: %d\n" ...
%             + "\texemplary: %d\n" ...
%             + "\tmodulation: %d\n" ...
%             + "\nIt might be best to abort and fix this issue before continuing." ...
%             , numel(simpleMasks) ...
%             , numel(exemplaryMasks) ...
%             , numel(modulationMasks) ...
%             )
%         keyboard
%     end
    
%     rawResult = cellfun ...
%         ( @(simp, exemp, modul) struct ...
%             ( simple = simp ...
%             , exemplary = exemp ...
%             , modulation = {modul} ...
%             ) ...
%         , simpleMasks ...
%         , exemplaryMasks ...
%         , modulationMasks ...
%         );
    
%     % Normalize this data such that masks is struct array, with a single
%     % struct for each session.
%     masks = struct ...
%         ( simple = loadSimpleMasks(args{:}) ...
%         , exemplary = loadExemplaryMasks(args{:}).simple ...
%         , modulation = loadModulationMasks(args{:}).simple ...
%         );
    
end