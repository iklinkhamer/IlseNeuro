% TODO: consider splicing out and parametrizing over the three events (cs, prior
% and us) to shorten this function and simplify its return value.
function stats = histStatsSessionWrapper ...
                            ( sessionData ...
                            , curation...
                            )
    arguments
        sessionData(1,1) struct
        curation(1,1) struct
    end
                
    if isempty(curation.complex)
%         warning ...
%             ( "Function `histStatsSessionWrapper` is called  with a " ...
%             + "`channelMask` that is empty (i.e. has length zero), this " ...
%             + "should be avoided by filtering out such sessions prior to " ...
%             + "calling this function and I HIGHLY RECOMMEND ABORTING THE " ...
%             + "CURRENT ANALYSIS UNTIL THIS IS FIXED." ...
%             )
        nonResult = struct ...
            ( cs = [] ...
            , prior = [] ...
            , us = [] ...
            );
        stats = struct ...
            ( modulating = nonResult ...
            , nonModulating = nonResult ...
            );
%         keyboard;
        return
    end
    
    p = getParams();

    function stats = computeStats(rasterField, roi, fullRange, mask)
        if not(any(mask))
            stats = struct.empty;
        else
            stats = arrayfun ...
            ( @(chanIdx) ...
                computePsthStats ...
                    ( sessionData.neuron(chanIdx).(rasterField) ...
                    , roi ...
                    , fullRange ...
                    ) ...
            , find(mask) ...
            );
        end
    end
    
    stats = struct ...
        ( modulating = struct ...
            ( cs = computeStats ...
                        ( "RasterXY_cs" ...
                        , p.cspkRanges.cs ...
                        , p.psthRanges.cs_full ...
                        , curation.complex(:) & curation.modulation.cs(:) ...
                        ) ...
            , prior = computeStats ...
                        ( "RasterXY_cs" ...
                        , p.cspkRanges.prior ...
                        , p.psthRanges.cs_full ...
                        , curation.complex(:) & curation.modulation.prior(:) ...
                        ) ...
            , us = computeStats ...
                        ( "RasterXY_us" ...
                        , p.cspkRanges.us ...
                        , p.psthRanges.us_full ...
                        , curation.complex(:) & curation.modulation.us(:) ...
                        ) ...
            ) ...
        , nonModulating = struct ...
            ( cs = computeStats ...
                        ( "RasterXY_cs" ...
                        , p.cspkRanges.cs ...
                        , p.psthRanges.cs_full ...
                        , curation.complex(:) & not(curation.modulation.cs(:)) ...
                        ) ...
            , prior = computeStats ...
                        ( "RasterXY_cs" ...
                        , p.cspkRanges.prior ...
                        , p.psthRanges.cs_full ...
                        , curation.complex(:) & not(curation.modulation.prior(:)) ...
                        ) ...
            , us = computeStats ...
                        ( "RasterXY_us" ...
                        , p.cspkRanges.us ...
                        , p.psthRanges.us_full ...
                        , curation.complex(:) & not(curation.modulation.us(:)) ...
                        ) ...
            ) ...
        );
end