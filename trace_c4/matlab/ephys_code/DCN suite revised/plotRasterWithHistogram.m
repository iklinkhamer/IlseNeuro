function plotRasterWithHistogram(ax, rasterXY, range, kwargs)
    arguments
        ax
        rasterXY
        range
        kwargs.histogramHeight(1,1) double {isnumeric} = 15;
        kwargs.highlightRegions(1,:) struct = struct.empty
        kwargs.nTrials(1,1) double {isnumeric} = IkUtils.getParams().n_trials; % IK change
        kwargs.eventTimes(1,:) double {isnumeric} = [];
        kwargs.trialTypes = [];
    end
    
    %% Histogram

    xlabel(ax, "time [ms]")
    ylabel(ax, "Sorted trials")
    
    textHeight = 5;
    
    spikeTimes = rasterXY(1,1:3:end) * 1000; % IK change 2 to 3. 8-1-24
    
    binWidth = IkUtils.getParams().BinW;
    edges = (range.min:binWidth:range.max) * 1000;
    
    rangeMask = spikeTimes >= range.min * 1000 & spikeTimes <= range.max * 1000;
   
    counts = histcounts(spikeTimes(rangeMask), edges);
    
    maxCount = max(counts);
    if any(maxCount == [0, nan, inf])
        normalization = 1;
    else
        normalization = maxCount;
    end
    
    IkUtils.histogramIK ... % IK change
        ( ax ...
        , BinEdges = edges ... 
        , BinCounts = counts / normalization * kwargs.histogramHeight ...
        , faceColor = [.75 .75 .75] ...
        , edgecolor = 'none' ... % [.6 .6 .6] ...
        )
    
    yMax = kwargs.nTrials ...    % IK change. 8-1-24 kwargs.nTrials ...
        + kwargs.histogramHeight ...
        + (numel(kwargs.highlightRegions)+1) * textHeight ...
        ;
    
    arrayfun ...
        ( @(spec) highlightRegionHist(spec, normalization) ...
        , kwargs.highlightRegions ...
        )

    arrayfun ...
        ( @(i, spec) highlightRegionText(i, spec.stats) ...
        , 1:numel(kwargs.highlightRegions) ...
        , kwargs.highlightRegions ...
        );
   
    
    function highlightRegionHist(spec, normalization)
        
        if isfield(spec, "color")
            colorArg = {"facecolor", spec.color};
        else
            colorArg = {};
        end
% plot blue and green blocks
        x1 = spec.range.min * 1000;
        x2 = spec.range.max * 1000;
        y1 = kwargs.histogramHeight + 1;
        y2 = y1 + length(unique(rasterXY(2,1:3:end))); %kwargs.nTrials;
        patch ...
            ( ax ...
            , [x1 x1 x2 x2] ...
            , [y1 y2 y2 y1] ...
            , spec.color ... % IK change. TODO: Check why prev code didn't work and change to right color.
            , EdgeColor = 'none' ...
            , FaceAlpha = 0.2 ...
            )
        
        regionEdges = (spec.range.min:binWidth:spec.range.max) * 1000;

        regionMask = spikeTimes >= spec.range.min * 1000 & spikeTimes <= spec.range.max * 1000;
   
        regionCounts = histcounts(spikeTimes(regionMask), regionEdges);
        
        IkUtils.histogramIK ... % IK change
            ( ax ...
            , colorArg{:} ...
            , BinEdges = regionEdges ...
            , BinCounts = regionCounts / normalization * kwargs.histogramHeight ...
            , facealpha = 1 ...
            , edgecolor = 'none' ... % [.75 .75 .75] ...
            );
        
    end
    
    function highlightRegionText(index, stats)

        y = yMax ...
            - 5 * index ...
            ;
        
        text ...
            ( ax ...
            , (range.min + (range.max - range.min)*0.1) * 1000 ...
            , y ...
            , sprintf("Pk: %d", stats.maxAmp) ...
            );

        text ...
            ( ax ...
            , (range.min + (range.max - range.min)*0.3) * 1000 ...
            , y ...
            , sprintf('PT: %.4f', stats.maxAmpTime) ...
            );

        text ...
            ( ax ...
            , (range.min + (range.max - range.min)*0.5) * 1000 ...
            , y ...
            , sprintf('SD: %.4f', stats.sd) ...
            );
        
        text ...
            ( ax ...
            , (range.min + (range.max - range.min)*0.7) * 1000 ...
            , y ...
            , sprintf('mod: %.4f', stats.modulation) ...
            );

        text ...
            ( ax ...
            , (range.min + (range.max - range.min)*1) * 1000 ...
            , y ...
            , sprintf('freq SD2: %.4f', 3*stats.basefreqSD) ...
            );
    end
    
    %% Raster

uniqueTrials = unique(rasterXY(2, 1:3:end));  % Unique trial values
adapted_height = 1:numel(uniqueTrials);      % Adapted heights for each unique trial

% Find indices of occurrences of unique trials in rasterXY
trialIndices = ismember(rasterXY(2, :), uniqueTrials);

% % Find indices of occurrences of unique trials in rasterXY
 [~, ~, trialIdx] = unique(rasterXY(2, 1:3:end));  % Extract unique trial indices

% Assign adapted heights directly
rasterXY_adapted = rasterXY;
rasterXY_adapted(2, trialIndices) = adapted_height(trialIdx);

% Create a logical index shifted by one position
nextIndices = false(size(trialIndices));
nextIndices(1:end-2) = trialIndices(3:end);
nextIndices(end-1) = true;

% Increment the following indices by raster_spike_height
rasterXY_adapted(2, nextIndices) = rasterXY_adapted(2, trialIndices) + IkUtils.getParams().raster_spike_height;


    plot ...
        ( ax ...
        , rasterXY_adapted(1,:) * 1000 ...
        , rasterXY_adapted(2,:) + kwargs.histogramHeight ...
        , Color = [.2 .2 .2] ...
        );
    
    eventMn = kwargs.histogramHeight + 1;
    eventMx = eventMn + max(rasterXY_adapted(2,1:3:end)); %kwargs.nTrials - 1; % IK check. 9-1-24
    
    arrayfun ...
        ( @(eventTime) ...
            plot ...
                ( ax ...
                , [eventTime eventTime] * 1000, [eventMn, eventMx] ...
                , '--' ...
                , color = [.5 .5 .5] ...
                ) ...
        , kwargs.eventTimes ...
        );
    
    xlim(ax, [range.min range.max] * 1000);
    ylim(ax, [0 yMax]);

% plot Highlight regions conditions


% Find indices where the third row (rasterXY_adapted(3, :)) matches the conditions
csIndices = rasterXY_adapted(3, :) == 0;
usIndices = rasterXY_adapted(3, :) == 2;

% Calculate the last CS-only trial
lastCSonlyTrial = floor(max(rasterXY_adapted(2, csIndices)));


        x1 = ax.XLim(1);
        x2 = ax.XLim(2);
        y1 = kwargs.histogramHeight + 1;
        y2 = y1 + lastCSonlyTrial;

      patch ...
            ( ax ...
            , [x1 x1 x2 x2] ...
            , [y1 y2 y2 y1] ...
            , rgb("DarkViolet") ... 
            , EdgeColor = 'none' ...
            , FaceAlpha = 0.2 ...
            )

       try
          % Find the first and last US-only trials
          firstUSonlyTrial = min(rasterXY_adapted(2, usIndices));
          lastUSonlyTrial = floor(max(rasterXY_adapted(2, usIndices)));

          x1 = ax.XLim(1);
          x2 = ax.XLim(2);
          y1 = kwargs.histogramHeight + firstUSonlyTrial;
          y2 = y1 + (lastUSonlyTrial - firstUSonlyTrial) + 1;

          patch ...
              ( ax ...
              , [x1 x1 x2 x2] ...
              , [y1 y2 y2 y1] ...
              , rgb("Orange") ...
              , EdgeColor = 'none' ...
              , FaceAlpha = 0.2 ...
              )
      catch
      end

    ax.YAxis.TickValues = [(kwargs.histogramHeight + 1) (kwargs.histogramHeight + lastCSonlyTrial + 1) (kwargs.histogramHeight + firstUSonlyTrial)];
    ax.YAxis.TickLabels = [IkUtils.getParams().condition_types(1), IkUtils.getParams().condition_types(2), IkUtils.getParams().condition_types(3)];
    ax.XAxis.TickValues = [0 200 350 500];
    
    %% Plot trial type colors
    
    if ~isempty(kwargs.trialTypes)
        plotTrialTypeColors ...
            ( ax ...
            , sort(kwargs.trialTypes) ...
            , kwargs.histogramHeight + 1 ...
            , kwargs.histogramHeight + numel(kwargs.trialTypes) ...
            , ax.XLim(1) ...
            , ax.XLim(1) + (ax.XLim(2) - ax.XLim(1)) / 80 ...
            )
    end
    
    
end
    
function plotTrialTypeColors(ax, trialTypes, yMin, yMax, xMin, xMax)
    
    height = yMax - yMin;
    types = unique(trialTypes);
    cumFrac = 0;
    
    allColors = getColors();
     
   if numel(types) == 2
       % Delta
       colors = [allColors.csonlyDelt; allColors.c_delta];
   else
       colors = allColors.ColDist;               
   end
    
    for i = 1:numel(types)
        type = types(i);
        
        frac = sum(trialTypes == types(i)) / numel(trialTypes);
        y1 = yMin + height * cumFrac;
        y2 = yMin + height * (cumFrac + frac);
        
        
       cumFrac = cumFrac + frac;
       
       
       patch ...
            ( ax ...
            , [xMin xMin xMax xMax] ...
            , [y1 y2 y2 y1] ...
            , colors(type+1, :) ...
            , EdgeColor = 'none' ...
            , FaceAlpha = 1 ...
            )
        
    end
    
end